# Introduction to `tsod` for Data Validation

Time series data often contains unexpected values, and `tsod` is a Python package specifically designed to help you detect these outliers. This section will introduce you to `tsod` and guide you through its basic setup, preparing you to validate your time series data.

## What is `tsod`?

[`tsod`](https://github.com/DHI/tsod), which stands for Time Series Outlier Detection, is an open-source Python package developed by DHI. It provides a collection of different methods for identifying outliers or anomalies in univariate time series data—that is, time series with a single variable.

## Why Use `tsod` for Data Validation?

Time series data, particularly when sourced from sensors or external systems, can frequently include errors, sudden spikes, or other unusual values. These anomalies might arise from sensor malfunctions, errors during data transmission, or even genuine but extreme environmental events. Identifying and addressing these outliers is a critical step in data validation for several key reasons:

*   Outliers can significantly distort statistical analyses, leading to incorrect conclusions.
*   They can adversely affect the performance and reliability of models, such as MIKE+ models, that depend on this data as input.
*   Cleaning your data improves its overall quality and boosts confidence in any subsequent results or decisions.

`tsod` offers a convenient and accessible way to apply established outlier detection techniques to your datasets.

## Setting up `tsod`

Similar to how you installed `mikeio` in previous sections, you will use `uv` to install `tsod` within your activated virtual environment.

::: {.callout-tip}
## Activate Your Environment
Before installing new packages, always ensure your project's virtual environment (created with `uv`) is activated in your terminal. Refer to Module 1 if you need a reminder on how to do this.
:::

1.  **Install `tsod`:**
    Open your terminal (e.g., PowerShell in VS Code) and, with your virtual environment active, run the following command:

    ```powershell
    uv pip install tsod
    ```

2.  **Verify Installation (Optional):**
    You can confirm that `tsod` has been installed correctly by trying to import it in a Python session or script.

    ```{python}
    #| output: false
    import tsod
    print("tsod imported successfully!") # This line won't show if output is false, but no error means success
    ```

    If the import runs without errors, `tsod` is ready to use.
    (Note: `tsod` might not have a `__version__` attribute directly available through `tsod.__version__` for a quick check; simply importing it is often sufficient verification.)

## Overview of a "Cookie-Cutter" Anomaly Detection Approach with `tsod`

For this module, we will concentrate on a straightforward, "cookie-cutter" method for applying an outlier detection algorithm from `tsod`. The typical workflow involves these general steps:

1.  **Selecting a Detector:** `tsod` offers a variety of detectors. These can range from simple methods based on standard deviations or value ranges to more complex algorithms. We will begin with a fairly simple detector.
2.  **Instantiating the Detector:** You'll create an instance of your chosen detector class. This sometimes involves providing specific parameters, such as a window size for calculations or a multiplier for standard deviation thresholds.
3.  **Applying the Detector:** The instantiated detector object will have a method (commonly named `.detect()`) that you apply to your `pandas` Series (which represents a single time series item).
4.  **Interpreting Results:** The detector will typically return information indicating which data points it considers to be outliers. This output is often a boolean Series, where `True` marks an outlier.

In the next section, we will put this approach into practice by using `tsod` to identify outliers in a time series and then explore strategies for handling them.