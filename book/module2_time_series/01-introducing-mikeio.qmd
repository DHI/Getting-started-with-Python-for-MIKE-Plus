# Introducing `mikeio`

This section introduces `mikeio`, a key Python package from DHI for working with MIKE file formats.

[MIKE IO (`mikeio`)](https://github.com/DHI/mikeio) is a Python library developed by DHI. Its primary purpose is to facilitate reading, writing, and manipulating data stored in various MIKE file formats. These formats include time series files like `.dfs0` and `.dfs1`, spatial data files such as `.dfs2`, `.dfs3`, and `.dfsu`, as well as mesh files. Essentially, `mikeio` acts as a crucial bridge, connecting the MIKE software ecosystem with the powerful capabilities of the scientific Python stack.

::: {.callout-note}
## MIKE IO in the DHI Python Ecosystem
`mikeio` serves as a foundational package within DHI's Python offerings. Other specialized DHI Python packages, such as `mikeio1d` (designed for 1D model results) and `mikepluspy` (for specific interactions with MIKE+), often build upon or complement the functionalities provided by `mikeio`.
:::

## Why Use `mikeio` for Time Series Data (`dfs0`)?

For this course, and particularly in this module focusing on time series, `mikeio` is an indispensable tool. It allows you to:

*   **Read `.dfs0` files:** Programmatically access time series data stored in `.dfs0` files. These files are commonly used in MIKE+ for various data types, including meteorological data, boundary conditions, and observed data time series.
*   **Integrate with `pandas`:** Seamlessly convert `.dfs0` data into `pandas` DataFrames. This enables you to leverage the powerful data analysis and manipulation capabilities of `pandas`, building upon the skills you developed in Module 1.
*   **Write `.dfs0` files:** Export your processed or newly created time series data from `pandas` DataFrames back into the `.dfs0` format. This makes your Python-processed data readily usable in MIKE+ or other DHI tools.
*   **Automation:** Automate repetitive tasks involving `.dfs0` data, which can save significant time and effort in your modeling workflows.

## Setting up `mikeio`

You'll install `mikeio` using `uv`, the package manager introduced in Module 1.

::: {.callout-tip}
## Activate Your Environment
Before installing new packages, always ensure your project's virtual environment (created with `uv`) is activated in your terminal. Please refer to Module 1 if you need a reminder on how to perform this step.
:::

To install `mikeio`, open your terminal (for example, PowerShell within VS Code) and, after ensuring your virtual environment is active, run the following command:

```powershell
uv pip install mikeio
```

You can verify that `mikeio` has been installed correctly by importing it in a Python script or an interactive session and checking its version. For example, you can run this short Python snippet:

```{python}
import mikeio
print(f"Successfully imported mikeio version: {mikeio.__version__}")
```

## Key `mikeio` Concepts for `.dfs0` Files

When working with `.dfs0` files (and indeed other DHI formats) using `mikeio`, you'll primarily interact with two fundamental types of objects:

*   **`DataArray`**: This object represents a single time series (or a spatial field). It encapsulates not just the data values but also a time axis and associated metadata, such as the item's name and type.
*   **`Dataset`**: This object acts as a container for one or more `DataArray` objects. When you read a `.dfs0` file, which often contains multiple time series items (e.g., water levels from several gauges), `mikeio` will typically represent this collection as a `Dataset`.

You'll see these `DataArray` and `Dataset` objects in action as we begin to read and write `.dfs0` files in the subsequent sections of this module.