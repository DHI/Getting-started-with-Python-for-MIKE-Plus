# Time Series Selection and Resampling

## Section Introduction

Now that you can read time series data into a pandas DataFrame, this section focuses on manipulating and transforming the data, which is a crucial skill for preparing data for use in MIKE+ modeling workflows. You'll learn how to select specific portions of your time series data based on time, and how to resample your data to different frequencies using pandas.

## Key Concepts: Time-Based Selection

Pandas provides powerful indexing capabilities that allow you to select data based on specific time ranges. For example, you can select data between '2023-01-01' and '2023-01-07' using `df['2023-01-01':'2023-01-07']`. This creates a slice of the DataFrame containing only the data within that time period. Slicing time series data allows you to extract specific portions of the time series for further analysis or visualization, helping you focus on the most relevant data for your MIKE+ modeling needs. For examples and guides, see [Pandas indexing](https://pandas.pydata.org/docs/user_guide/indexing.html).

Slicing the DataFrame based on time indices allows you to extract specific portions of the time series. By selecting specific time ranges, you can zoom in on periods of interest, remove irrelevant data, or prepare your data for comparison with other datasets.

## Key Concepts: Resampling

Resampling is the process of changing the frequency of a time series, which is often required when working with data from different sources or when preparing data for specific MIKE+ model requirements. The `pandas.resample()` method provides a flexible way to resample your time series data.

Common resampling rules include 'D' (daily), 'H' (hourly), 'T' or 'min' (minutely), and 'S' (seconds). The resampling rule specifies the new frequency of the time series. For detailed information about resampling frequencies, see [pandas documentation on resampling](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.resample.html). When resampling, you often need to aggregate the data to calculate summary statistics for the new time intervals. Common aggregation functions include `mean()`, `sum()`, `min()`, and `max()`. For instance, if you resample hourly data to daily data, you might use `mean()` to calculate the average value for each day.

Pandas is very readable. Encouraging a fluent (or chaining) structure for performing selection and resampling in one line.

## Link Guidance

Consult the [pandas documentation](https://pandas.pydata.org/docs/) for more information on resampling. For more information on `mikeio` package, refer to the [official `mikeio` documentation](https://github.com/DHI/mikeio).

## Video - Selecting and Resampling Time Series Data (5-10 min)

Please watch the video below for a demonstration of how to select data by time ranges and specific indices. It also shows how to resample the DataFrame to different frequencies (e.g., hourly to daily) using the `resample()` method and how to use aggregation functions to compute summary statistics during resampling.