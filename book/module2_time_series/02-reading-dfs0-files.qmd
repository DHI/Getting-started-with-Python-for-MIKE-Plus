# Reading `dfs0` Files with `mikeio`

This section covers how to read time series data from `dfs0` files using the `mikeio` Python package and then convert this data into `pandas` DataFrames, which are highly suitable for manipulation and analysis in Python.

## Reading `dfs0` Files

The cornerstone for accessing `dfs0` files within `mikeio` is the `mikeio.read()` function. It's a versatile function designed to handle various DHI file formats, including the time series data stored in `.dfs0` files.

To begin, you simply provide the path to your `.dfs0` file to this function. Let's see how to read a sample file:

```{python}
import mikeio

# Replace "data/sample.dfs0" with the actual path to your file
ds = mikeio.read("data/sample.dfs0")
ds
```

Executing `mikeio.read()` returns a `mikeio.Dataset` object. This `Dataset` acts as a container, holding all the time series items, their corresponding data values, and the time information extracted from the `dfs0` file. You can easily inspect the contents of this `Dataset`. For instance, to see the names and properties of the data items it contains:

```{python}
ds.items
```

And to view the time axis:

```{python}
ds.time
```

## Converting `mikeio` `Dataset` to a Pandas DataFrame

While the `mikeio.Dataset` object provides a direct representation of the `dfs0` file, for most data analysis and manipulation tasks in Python, a `pandas` DataFrame offers a more convenient and powerful structure. Fortunately, `mikeio` facilitates this conversion smoothly.

The `Dataset` object comes equipped with a `.to_dataframe()` method. Calling this method will transform the data into a `pandas` DataFrame.

```{python}
df = ds.to_dataframe()
df.head()
```

The resulting `pandas` DataFrame is structured intuitively for time series analysis:
*   It features a `DatetimeIndex`, which represents the time steps of your data.
*   Each item from the `dfs0` file becomes a column in the DataFrame, with column names typically derived from the original item names in the `dfs0` file.

::: {.callout-tip}
## Exploring Your Data in Pandas
Once your data is loaded into a `pandas` DataFrame, you can leverage the full suite of `pandas` operations you started learning in Module 1 to explore and understand it:
*   `df.head()` to view the first few rows.
*   `df.info()` to get a concise summary of data types and check for missing values.
*   `df.describe()` for a quick statistical overview of your data.
*   `df.plot()` for generating quick visualizations (assuming `matplotlib` is set up).

For a comprehensive guide to all `pandas` functionalities, refer to the official [Pandas documentation](https://pandas.pydata.org/pandas-docs/stable/).
:::

## Video - Example: Reading `dfs0` and Converting to DataFrame (5-10 min)
This video demonstrates the practical steps of reading a `dfs0` file and converting it to a `pandas` DataFrame:
*   Opening a terminal within Visual Studio Code.
*   Running a Python script that utilizes `mikeio.read()` to open a sample `dfs0` file.
*   Inspecting the returned `Dataset` object (e.g., printing `ds.items`, `ds.time`).
*   Converting the `Dataset` to a `pandas` DataFrame using the `.to_dataframe()` method.
*   Displaying the first few rows and information summary of the DataFrame using `.head()` and `.info()`.

{{< video https://www.youtube.com/embed/placeholder_video_id_reading_dfs0 >}}