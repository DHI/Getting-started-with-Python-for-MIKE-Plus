# Reading `dfs0` Files with `mikeio`

This section covers how to read time series data from `dfs0` files using the `*mikeio*` Python package and then convert this data into `*pandas*` DataFrames, which are more convenient for many data manipulation tasks.

## Reading `dfs0` Files

The cornerstone for accessing `dfs0` files (and other DHI dfs formats) within `*mikeio*` is the `mikeio.read()` function. It's a versatile tool that simplifies the process of bringing your MIKE data into the Python environment.

To perform a basic read operation, you simply provide the path to your `.dfs0` file. For instance, if you have a file named `sample.dfs0` in a `data` subdirectory, you can read it as follows:

```{python}
import mikeio

# Read the dfs0 file
ds = mikeio.read("data/sample.dfs0")
ds
```

The `mikeio.read()` function returns a `Dataset` object. This object acts as a container, holding all the time series items, along with their corresponding data values and time information, extracted from the `dfs0` file. You can easily inspect basic properties of this `Dataset`. For example, to see the names of the items or the total number of items:

```{python}
#| output: true
# Assuming 'ds' is the Dataset object from the previous step
# Print item information (names, types, units)
print(ds.items)

# Print the number of items in the Dataset
print(f"Number of items: {ds.n_items}")
```

## Converting `mikeio` `Dataset` to a Pandas DataFrame

While the `*mikeio*` `Dataset` object is fundamental for interacting with DHI file formats, a `*pandas*` DataFrame often provides a more familiar and flexible structure for detailed data analysis and manipulation in Python. Fortunately, `*mikeio*` offers a straightforward method to make this conversion.

The `Dataset` object comes equipped with a `.to_dataframe()` method. Calling this method will transform the `Dataset` into a `*pandas*` DataFrame.

```{python}
# Assuming 'ds' is the Dataset object from reading the dfs0 file
# Convert the Dataset to a pandas DataFrame
df = ds.to_dataframe()
df
```

The resulting `*pandas*` DataFrame is typically structured with a `DatetimeIndex` representing the time steps from your `dfs0` file. Each item (time series) from the `dfs0` file will become a column in the DataFrame, with column names usually derived from the item names in the original file.

::: {.callout-tip}
## Exploring Your Data in Pandas
Once your time series data is loaded into a `*pandas*` DataFrame, you can leverage all the powerful `*pandas*` operations you became familiar with in Module 1. For example:
*   `df.head()` to view the first few rows.
*   `df.info()` to get a summary of data types and check for missing values.
*   `df.describe()` for quick descriptive statistics.
*   `df.plot()` for basic visualizations (if `matplotlib` is set up).

For a comprehensive overview of `*pandas*` capabilities, always refer to the official [Pandas documentation](https://pandas.pydata.org/pandas-docs/stable/).
:::

## Video - Example: Reading `dfs0` and Converting to DataFrame (5-10 min)

{{< video https://www.youtube.com/embed/placeholder_video_id >}}

This video demonstrates the practical steps:
*   Opening a terminal in VS Code.
*   Running a Python script that uses `mikeio.read()` to open a sample `dfs0` file.
*   Inspecting the returned `Dataset` object (e.g., printing `items`, `time`).
*   Converting the `Dataset` to a `*pandas*` DataFrame using `.to_dataframe()`.
*   Briefly displaying the DataFrame using `.head()` and `.info()`.