# Reading dfs0 Files with MIKE IO

This section covers reading time series data from `.dfs0` files using `mikeio`, a common starting point for workflows involving MIKE model outputs or field measurements.

## What is a dfs0 File? (Recap)

A `.dfs0` file is a DHI format for storing time series data. Key characteristics include:

*   Stores **time series data**.
*   Contains one or more **data items** (variables like water level or flow rate).
*   Each item has values recorded at specific **time steps**.

Consider a `.dfs0` file as analogous to a spreadsheet, where columns represent parameters and rows represent timestamps.

## Reading a dfs0 File into a Pandas DataFrame

`mikeio` simplifies reading `.dfs0` data and converting it into a Pandas DataFrame for analysis. The main function for this is `mikeio.read()`.

For example, to read `sample_timeseries.dfs0` located in a `data` subfolder:

```python
#| echo: true
#| output: true
import mikeio
import pandas as pd # Standard alias for pandas

# Define the path to your dfs0 file
# This example assumes a 'data' subfolder with 'sample_timeseries.dfs0'
# A dummy file is created if not present, for demonstration purposes.

# --- Placeholder for ensuring file exists (for runnable example) ---
try:
    from pathlib import Path
    import numpy as np
    from mikeio.eum import EUMType, EUMUnit
    
    data_file_path = Path("data/sample_timeseries.dfs0")
    data_file_path.parent.mkdir(parents=True, exist_ok=True)

    if not data_file_path.exists():
        print(f"Creating dummy '{data_file_path}' for demonstration...")
        time_index = pd.date_range(start="2023-01-01", periods=10, freq="H")
        item1_data = np.random.rand(10) * 10
        item2_data = np.random.rand(10) * 5 + 20

        da1 = mikeio.DataArray(
            data=item1_data, time=time_index, 
            item=mikeio.ItemInfo("WaterLevel_m", EUMType.Water_Level, EUMUnit.meter)
        )
        da2 = mikeio.DataArray(
            data=item2_data, time=time_index, 
            item=mikeio.ItemInfo("Flow_m3s", EUMType.Discharge, EUMUnit.cubic_meter_per_second)
        )
        mikeio.write_dfs0(str(data_file_path), [da1, da2])
        print("Dummy file created.")
    # --- End of placeholder ---

    dfs0_filepath = str(data_file_path)

    # Read the dfs0 file
    ds = mikeio.read(dfs0_filepath) 
    
    print("Type of object returned by mikeio.read():", type(ds))

    # Convert the Dataset to a Pandas DataFrame
    df = ds.to_dataframe()
    
    print("\nDataFrame head:")
    print(df.head())

except FileNotFoundError:
    print(f"Error: The file '{data_file_path}' was not found. Please ensure it's in the correct location.")
except Exception as e:
    print(f"An error occurred: {e}")
    print("Please ensure 'sample_timeseries.dfs0' is available in a 'data' subfolder, or check the dummy file creation.")
```

**Explanation:**

1.  **`import mikeio` and `import pandas as pd`**: Import necessary libraries.
2.  **`dfs0_filepath = "data/sample_timeseries.dfs0"`**: Define the file path.

    ::: {.callout-note}
    Replace `"data/sample_timeseries.dfs0"` with the actual path to your `.dfs0` file. Course exercises typically provide these files. The code includes a placeholder to create a dummy file for runnable demonstration.
    :::
3.  **`ds = mikeio.read(dfs0_filepath)`**: Reads the file. `mikeio.read()` usually returns a `Dataset` object containing `DataArray`s, which bundle data with time information and item metadata.
4.  **`df = ds.to_dataframe()`**: Converts the `Dataset` (or `DataArray`) to a Pandas DataFrame. The DataFrame will have a `DatetimeIndex` and columns corresponding to items from the `.dfs0` file.

## Inspecting the DataFrame

After loading data into a Pandas DataFrame, use standard Pandas methods for inspection:

```python
#| echo: true
#| output: true
#| eval: false # Requires df from previous cell; set to false for static doc.
# Assuming 'df' is the DataFrame loaded in the previous step

# print("\nDataFrame Info:")
# df.info()

# print("\nDataFrame Description:")
# print(df.describe())

# print("\nColumn Names (Item Names):")
# print(df.columns)

# print("\nIndex (Time Steps):")
# print(df.index)
```

Running this code (after `df` is loaded) would show:
*   `df.info()`: DataFrame summary, including `DatetimeIndex` and column types.
*   `df.describe()`: Descriptive statistics for numerical items.
*   `df.columns`: Item names from the `.dfs0` file.
*   `df.index`: Time steps.

## Understanding Data Items from `mikeio`

Before converting to a DataFrame, inspect items within the `mikeio` `Dataset` object:

```python
#| echo: true
#| output: true
#| eval: false # Requires ds from an earlier cell.
# Assuming 'ds' is the Dataset object from mikeio.read(dfs0_filepath)

# print("\nItems in the Dataset:")
# for item in ds.items:
#     print(f"- Name: {item.name}, Type: {item.type.name}, Unit: {item.unit.name}")
```

This lists each item's name, EUM type (e.g., `Water_Level`), and EUM unit (e.g., `meter`), crucial for understanding data.

::: {.callout-note title="DataArray and Dataset Objects"}
`mikeio` uses `DataArray` objects for individual time series (one item) and `Dataset` objects for collections (multiple items, typical for `.dfs0` files). These objects store data values and important metadata. The `.to_dataframe()` method bridges to Pandas.
:::

## Video - Reading and Inspecting a dfs0 File (Example)

*This section would ideally contain a short video (5-10 mins).*

**Video Description:** This video demonstrates:
1.  Locating a sample `.dfs0` file.
2.  Writing and running Python script to read the `.dfs0` file using `mikeio.read()`.
3.  Converting the `mikeio` `Dataset` to a Pandas DataFrame with `.to_dataframe()`.
4.  Using `df.head()`, `df.info()`, and inspecting `ds.items` to understand data structure.

---
comments: false
---