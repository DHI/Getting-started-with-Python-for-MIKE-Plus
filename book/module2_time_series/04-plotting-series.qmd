# Plotting Time Series Data

Visualizing your time series data is crucial for understanding its characteristics, identifying patterns, trends, seasonality, and potential outliers. Pandas provides a convenient `.plot()` method, which uses `matplotlib` as its backend, to quickly generate plots from DataFrames and Series.

## Why Visualize Time Series?

*   **Pattern Recognition:** Easily spot trends (upward, downward), seasonality (repeating patterns), and cycles.
*   **Outlier Detection:** Visual inspection can quickly highlight unusual data points.
*   **Data Quality Check:** Identify potential issues like gaps or sudden shifts.
*   **Communication:** Plots are an effective way to communicate findings to others.

## Basic Plotting with Pandas and Matplotlib

To use Pandas plotting capabilities, you'll need `matplotlib` installed. If you followed Module 1's setup for Pandas, `matplotlib` might have been installed as a dependency. If not, or to be sure:

```powershell
uv pip install matplotlib
```

Ensure this is done in your activated project environment.

Now, let's plot some data. Assuming you have a DataFrame `df` loaded from a `.dfs0` file with a `DatetimeIndex`:

```python
#| echo: true
#| output: true
#| eval: false # Assumes df is loaded from a previous step with time series data.
# For demonstration, let's recreate a sample df if not available
# import pandas as pd
# import numpy as np
# try:
#     # This checks if df exists from a previous cell in an interactive session
#     # For a .qmd file, you'd typically load it here or ensure it's passed.
#     df.head() 
# except NameError:
#     print("df not found, creating sample DataFrame for plotting.")
#     time_idx = pd.date_range("2023-01-01", periods=100, freq="H")
#     data = {
#         "WaterLevel_m": np.sin(np.linspace(0, 20, 100)) * 5 + 10,
#         "Flow_m3s": np.cos(np.linspace(0, 10, 100)) * 2 + 5
#     }
#     df = pd.DataFrame(data, index=time_idx)

import matplotlib.pyplot as plt # Standard import for matplotlib's pyplot module

# Plot a single item (column/Series)
# df["WaterLevel_m"].plot(figsize=(12, 6)) # Replace "WaterLevel_m" with your item name
# plt.title("Time Series of Water Level")
# plt.xlabel("Time")
# plt.ylabel("Water Level (m)")
# plt.grid(True)
# plt.show() # Essential for displaying the plot in scripts

# Plot multiple items from the DataFrame
# df[["WaterLevel_m", "Flow_m3s"]].plot(figsize=(12, 6)) # Replace with your item names
# plt.title("Time Series of Water Level and Flow")
# plt.xlabel("Time")
# plt.ylabel("Values")
# plt.legend() # Show legend for multiple lines
# plt.grid(True)
# plt.show()
```

**Explanation:**

*   **`import matplotlib.pyplot as plt`**: This is the conventional way to import `matplotlib.pyplot`, which provides a MATLAB-like plotting framework.
*   **`df["Item_Name"].plot(...)`**: Calls the `.plot()` method on a Pandas Series (a single column).
*   **`df[["Item1", "Item2"]].plot(...)`**: Calls `.plot()` on a DataFrame (multiple columns), plotting each column as a separate line.
*   **`figsize=(width, height)`**: Sets the figure size in inches.
*   **`plt.title("...")`, `plt.xlabel("...")`, `plt.ylabel("...")`**: Functions from `matplotlib.pyplot` to add title and axis labels.
*   **`plt.grid(True)`**: Adds a grid to the plot for better readability.
*   **`plt.legend()`**: Displays a legend, useful when plotting multiple lines.
*   **`plt.show()`**: Displays the plot. In Jupyter Notebooks, plots often appear automatically, but `plt.show()` is good practice, especially in scripts.

## Customizing Plots (Briefly)

The `.plot()` method and `matplotlib` offer extensive customization options:

*   **Line Styles & Markers:** `linestyle='--'`, `marker='o'`
*   **Colors:** `color='red'`
*   **Kind of plot:** `kind='bar'`, `kind='scatter'`, `kind='hist'` (e.g., `df['Item_Name'].plot(kind='line')` is default for time series).

Example:

```python
#| echo: true
#| output: false 
#| eval: false # Assumes df is loaded
# df["WaterLevel_m"].plot(figsize=(10, 5), linestyle='--', marker='.', color='green', label="Custom WL")
# plt.title("Customized Water Level Plot")
# plt.xlabel("Date/Time")
# plt.ylabel("Water Level (m ASL)")
# plt.legend()
# plt.grid(axis='y', linestyle=':') # Only horizontal grid lines, dotted
# plt.show()
```

::: {.callout-tip}
## Dive Deeper into Plotting
For quick exploratory plots, Pandas `.plot()` is excellent. For more complex or publication-quality graphics, you'll often use `matplotlib`'s object-oriented API directly.
*   [Pandas Plotting Documentation](https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html)
*   [Matplotlib Pyplot Tutorial](https://matplotlib.org/stable/tutorials/pyplot.html)
:::

## Saving Plots

You can save your plots to files using `plt.savefig()`:

```python
#| echo: true
#| output: false
#| eval: false # Assumes df is loaded and a plot has been generated before plt.show()

# df["Flow_m3s"].plot(figsize=(10,5))
# plt.title("Flow Rate Time Series")
# plt.xlabel("Time")
# plt.ylabel("Flow (m³/s)")
# plt.grid(True)

# Save the plot BEFORE plt.show() if you want to clear the figure after saving in some contexts.
# Or, if you have a figure object: fig.savefig(...)
# plt.savefig("flow_timeseries.png") 
# You can also specify DPI for resolution: plt.savefig("flow_timeseries_high_res.png", dpi=300)
# Other formats: "flow_timeseries.pdf", "flow_timeseries.svg"

# plt.show() # Then display it
```

Place `plt.savefig()` before `plt.show()`. If you call `plt.show()` first, it might clear the figure in some environments before `savefig` gets a chance to save it.

## Video - Quick Time Series Plotting with Pandas

*This section would ideally contain a short video (5-10 mins).*

**Video Description:** This video would demonstrate:

1.  Loading a time series DataFrame (e.g., from a `.dfs0` file).
2.  Creating a simple line plot of a single item using `df['column'].plot()`.
3.  Adding titles, labels, and a grid using `matplotlib.pyplot` functions.
4.  Plotting multiple items on the same axes.
5.  Saving the generated plot to a PNG file using `plt.savefig()`.

---
comments: false
---