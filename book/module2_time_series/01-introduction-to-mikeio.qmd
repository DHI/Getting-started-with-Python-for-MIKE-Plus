# Introduction to `mikeio`

## What is `mikeio`?

`mikeio` is a specialized Python package developed by DHI. Its primary function is to facilitate working with the various data file formats used by MIKE modelling software. Think of it as your Python toolkit for interacting with DHI-specific files.

With `mikeio`, you can perform essential operations like reading, writing, and manipulating a wide range of DHI file types. These include:
-   Time series files (e.g., `.dfs0`, `.dfs1`)
-   2D/3D data files (e.g., `.dfs2`, `.dfs3`, `.dfsu`)
-   Mesh files (e.g., `.mesh`)

In this particular module, our main focus will be on `.dfs0` files. These files are fundamental for storing time series data, which could represent measurements like rainfall, water levels, flow rates, or model outputs over time.

**Why is `mikeio` important for your work?**
`mikeio` acts as a crucial bridge connecting DHI's robust modelling capabilities with the flexible and extensive Python data science ecosystem. By using `mikeio`, you can:
-   Automate repetitive data processing tasks.
-   Perform custom analyses that might be complex or unavailable through the standard MIKE+ GUI.
-   Integrate your MIKE data with other Python libraries and tools for advanced visualization, statistical analysis, or machine learning.

**Official Documentation:**
For comprehensive information, detailed API references, and more examples, the official [DHI `mikeio` GitHub repository](https://github.com/DHI/mikeio) is your go-to resource. We encourage you to explore it as you become more familiar with the package.

## Installing `mikeio`

We'll assume you've already set up your Python project environment using `uv`, as covered in Module 1. If you haven't, please revisit that module's instructions.

To install `mikeio` into your current project's virtual environment, open your terminal (for instance, PowerShell within VS Code, or your preferred terminal application) and execute the following command:

```powershell
uv pip install mikeio
```

Let's break down this command:
-   `uv`: This is the Python packaging tool we're using in this course for managing environments and packages.
-   `pip install`: This is the standard command used by `pip` (Python's package installer, which `uv` utilizes) to download and install packages.
-   `mikeio`: This is the name of the package you want to install.

`uv` will then fetch the latest version of `mikeio` from the Python Package Index (PyPI) and install it along with any necessary dependencies into your isolated project environment.

**Verification:**
After the installation completes, it's good practice to verify that the package is installed correctly and is accessible to Python. You can do this by opening a Python interpreter (or creating a small Python script) and trying to import `mikeio`:

```python
import mikeio

# You can also print the installed version to confirm
print(f"mikeio version: {mikeio.__version__}")
```
If this code runs without any errors (like `ModuleNotFoundError`), then `mikeio` has been successfully installed in your environment.

::: {.callout-note}
## Packages, Libraries, and Modules: Clearing Up the Terms
In the Python community, you'll often hear the terms "package," "library," and "module." While they have slightly different technical meanings, they are frequently used interchangeably. Here's a simple breakdown:

-   A **module** is typically a single `.py` file containing Python definitions and statements (like functions, classes, variables).
-   A **package** is a collection of related modules organized in a directory hierarchy. It usually includes a special `__init__.py` file.
-   A **library** is a more general term, often referring to a collection of packages or modules that provide a set of functionalities for a specific purpose.

For our purposes, `mikeio` is a Python **package** (and can also be referred to as a **library**).
:::

## `mikeio` and the DHI Ecosystem

`mikeio` is not just a standalone tool; it's a cornerstone of DHI's growing open-source Python ecosystem. This ecosystem aims to empower MIKE users by providing tools that integrate seamlessly with their existing workflows and Python's powerful capabilities.

The key benefit of `mikeio` within this ecosystem is its ability to enable smooth data exchange between MIKE+ (and other MIKE software like MIKE Zero) and your Python scripts. This unlocks a variety of powerful possibilities:

-   **Pre-process input data:** Prepare, clean, and transform data in Python before using it as input for your MIKE models.
-   **Post-process model results:** Extract, analyze, and visualize simulation results using Python's extensive data analysis and plotting libraries.
-   **Perform custom analyses:** Implement specialized calculations or analytical routines that are not directly available within the MIKE+ graphical user interface.
-   **Automate repetitive tasks:** Script common modelling workflows, saving time and reducing the potential for manual errors.
-   **Integrate MIKE data:** Combine data from MIKE files with other data sources or leverage advanced Python libraries for tasks like statistical modeling, machine learning, or sophisticated visualizations (e.g., using `pandas`, `scipy`, `scikit-learn`).

By learning `mikeio`, you are gaining a powerful skill to enhance your efficiency and expand the analytical capabilities of your MIKE+ modelling projects.

## Video - `mikeio` Introduction and Setup Example (5-10 min)

This video will provide a visual walkthrough of:
-   Installing the `mikeio` package into a Python project environment using `uv`.
-   A brief tour of the `mikeio` GitHub repository, highlighting where to find documentation, examples, and further resources.

{{< video URL_TO_MIKEIO_INTRO_SETUP_VIDEO >}}