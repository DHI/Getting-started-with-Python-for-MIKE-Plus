# Introduction to `tsod` for Anomaly Detection

Before using time series data for modeling or critical analysis, it's essential to perform data validation. One key aspect of this is **anomaly detection**—identifying data points or patterns that deviate significantly from the norm. The `tsod` Python package is a tool designed for this purpose.

## What is Data Validation and Anomaly Detection?

**Data Validation** is the process of ensuring that your data is clean, correct, and useful. It involves checking for:

*   Missing values
*   Incorrect data types
*   Out-of-range values
*   **Anomalies or outliers:** Data points that are unusual or inconsistent with the rest of the dataset.

Anomalies can arise from various sources, such as sensor errors, data transmission problems, or genuinely unusual events. Identifying and handling them appropriately is crucial for reliable analysis.

## Introducing `tsod`

`tsod` is a Python package specifically focused on **Time Series Outlier Detection**. While its origin (DHI-specific or general open-source) might vary, its goal is to provide a collection of algorithms and tools to help you find these unusual data points in your time series.

*   **Purpose:** To detect outliers or anomalies in univariate or multivariate time series.
*   **Availability:** Typically installed from PyPI.
*   **Documentation:** You would refer to its official documentation (e.g., on GitHub or ReadTheDocs) for detailed information on its features and API. For this course, we will assume it's available and focus on a practical example.
    *   *(Hypothetical Link: If `tsod` has a known public repository, e.g., `https://github.com/DHI/tsod` or a PyPI page, it would be linked here.)*

## Why use `tsod`?

*   **Specialized Algorithms:** `tsod` often includes algorithms specifically designed for time series data, considering aspects like seasonality or trend that generic outlier detection methods might miss.
*   **Ease of Use:** Aims to provide a user-friendly interface for applying these detection methods.
*   **Preprocessing Step:** Serves as an important preprocessing step before feeding data into hydrological models or further statistical analysis.

## Installation

Like other Python packages, you can install `tsod` using `uv` in your project's activated virtual environment:

1.  **Open your project terminal** in VS Code.
2.  **Install `tsod`**:

    ```powershell
    uv pip install tsod
    ```

3.  **Verify installation**:

    ```powershell
    uv pip list
    ```

    You should see `tsod` in the list of installed packages. You can also try importing it in Python:

    ```python
    import tsod
    print(f"tsod version: {tsod.__version__}") # If tsod provides a __version__ attribute
    ```

::: {.callout-tip}
## Keep Your Environment Clean
Remember to install `tsod` within your project's virtual environment to avoid conflicts with other projects or your global Python installation.
:::

## Core Concepts in `tsod`

While specific implementations vary, anomaly detection in `tsod` generally involves:

1.  **Input:** A Pandas Series or DataFrame representing the time series.
2.  **Detector:** You choose a specific detection algorithm (a "detector") from `tsod`. This could be based on:
    *   **Statistical properties:** E.g., points falling outside a certain number of standard deviations from a rolling mean.
    *   **Range checks:** Points falling outside predefined valid minimum/maximum values.
    *   **Machine learning models:** More advanced methods that learn normal patterns.
3.  **Parameters:** Detectors usually require you to set parameters (e.g., window size for rolling statistics, thresholds).
4.  **Output:** Typically, the detector will return a boolean Series of the same length as the input, where `True` indicates a detected anomaly at that time step.

## Exploring `tsod` Documentation

For a comprehensive understanding of all available detectors, their parameters, and best use cases, the official `tsod` documentation is your best resource. Look for:

*   Examples or tutorials.
*   A list of available anomaly detection algorithms.
*   API reference for detailed function and class descriptions.

In the next section, we'll look at a practical example of using a `tsod` detector.

---
comments: false
---